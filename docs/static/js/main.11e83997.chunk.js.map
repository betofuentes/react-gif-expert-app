{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","c","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAkCeA,EA9BK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAElB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,mCACI,sBAAMC,SAVO,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,IACxBR,GAAc,SAAAS,GAAC,OAAKP,GAAL,mBAAmBO,OAClCN,EAAc,MAMd,SACI,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAfxB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,e,+BCTlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACCC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAV3B,kBAeZM,GAfY,4CAAH,sDCEPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAIpC,OACI,sBAAKc,UAAU,2DAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCHHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAGrB,ECLwB,SAACA,GACzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAXAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGvB,CAACpB,IAGIqB,EDZwBK,CAAa1B,GAAhCa,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAEpB,OACI,qCACA,6BAAKpB,IAEJoB,GAAW,mBAAGJ,UAAU,0CAAb,wBAEZ,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAESA,GADAA,EAAIC,aEclBgB,EA/BM,WAGjB,MAAoCzC,mBAAS,CAAC,kBAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAQA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAES2C,EAAWnB,KAAK,SAAAT,GAGb,OAAO,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCpB7C6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.11e83997.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useState } from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n    \r\n    const handleInputChance = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault(); // Esto previene el comportamiento de refrescar al hacer submit\r\n        if(inputValue.trim().length>2){\r\n            setCategories(c => [inputValue,...c ]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={handleSubmit}>\r\n                <input type=\"text\" value={inputValue} onChange={handleInputChance}></input>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory","export const getGifs = async(category) => {\r\n    const url =`https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=wa4uJPvnBifW8n0qOBtL9pbJ1RJnOQGh`\r\n    const resp = await fetch(url);\r\n    // resp.ok\r\n    const {data} = await resp.json()\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n            }\r\n    })\r\n    \r\n    // console.log(images);\r\n    return gifs;\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n\r\n    // console.log(id, title, url);\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce animate__delay-2s\">\r\n            <img src={url} alt={title}></img>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n// import { useState, useEffect } from 'react'\r\n// import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    // const [images, setImages] = useState([]);\r\n    const {data:images, loading} = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n        <h3>{category}</h3>\r\n\r\n        {loading && <p className=\"animate__animated animate__backOutRight\">Loading...</p>}\r\n\r\n        <div className=\"card-grid\">\r\n            {\r\n                images.map(img => \r\n                    <GifGridItem \r\n                        key={img.id}\r\n                         {...img } // con el spread operator mandamos todo el array como una prop\r\n                    />\r\n                )\r\n            }\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(()=>{\r\n        getGifs(category)\r\n            .then( imgs => {\r\n                setstate({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            })\r\n    },[category])\r\n\r\n\r\n    return state;\r\n}","import React, { useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    // const categories = ['One punch', 'Samurai X', 'Dragon Ball'];\r\n    const [categories, setCategories] = useState(['One punch man']);\r\n\r\n    // const handleAdd = ( ) => {\r\n    //     // setCategorias nos permite modificar el estado de categorias\r\n    //     // el spread operator(...) nos permite traer todos los elementos de la lista categorias más los nuevos elementos que se quieran agregar\r\n    //     setCategories(c => [...c,'My hero academia'])\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr />\r\n            {/* <button onClick={handleAdd}>Agregar</button> */}\r\n            <ol>\r\n                {/* el metodo map nos sirve para crear un nuevo arreglo ejecutando una función para cada uno de los elementos del arreglo al que se le aplicó el .map */}\r\n                    {categories.map( category => {\r\n                        // se establece el valor de key por que el metodo map es lo que retorna\r\n                        // return <li key={ category }> { category } </li>\r\n                        return <GifGrid key={category} category={category}/>\r\n                    } )\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default GifExpertApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}